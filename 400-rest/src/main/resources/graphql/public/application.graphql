# Copyright 2021 Harness Inc. All rights reserved.
# Use of this source code is governed by the PolyForm Shield 1.0.0 license
# that can be found in the licenses directory at the root of this repository, also available at
# https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.

extend type Query {
  # Get details about a Harness Application
  application(applicationId: String!): Application @dataFetcher(name: application)

  # Get details about Harness Applications.
  applications(filters: [ApplicationFilter], limit: Int!, offset: Int): ApplicationConnection
    @dataFetcher(name: applicationConnection)
  # Fetch details about a Harness Application by it's name
  applicationByName(name: String!): Application @dataFetcher(name: application)
}

type Application {
  id: String
  name: String
  description: String
  createdAt: DateTime
  createdBy: User
  # Beta: When this is set to true, all manual triggers will require API Key authorization.
  # Doc link: https://docs.harness.io/article/mc2lxsas4c-trigger-a-deployment-using-c-url#option_enforce_api_keys_for_manual_triggers
  isManualTriggerAuthorized: Boolean
  areWebHookSecretsMandated: Boolean

  services(limit: Int!, offset: Int): ServiceConnection
    @dataFetcher(name: serviceConnection, contextFieldArgsMap: "{ \"Application\": \"id\"}")

  workflows(limit: Int!, offset: Int): WorkflowConnection
    @dataFetcher(name: workflowConnection, contextFieldArgsMap: "{ \"Application\": \"id\"}")

  pipelines(limit: Int!, offset: Int): PipelineConnection
    @dataFetcher(name: pipelineConnection, contextFieldArgsMap: "{ \"Application\": \"id\"}")

  environments(limit: Int!, offset: Int): EnvironmentConnection
    @dataFetcher(name: environmentConnection, contextFieldArgsMap: "{ \"Application\": \"id\"}")
}

type ApplicationConnection {
  pageInfo: PageInfo
  nodes: [Application]
}

enum ApplicationFilterType {
  Application
}

input ApplicationFilter {
  application: IdFilter
  tag: ApplicationTagFilter
}

input ApplicationTagFilter {
  entityType: ApplicationTagType
  tags: [TagInput]
}

enum ApplicationTagType {
  APPLICATION
}
